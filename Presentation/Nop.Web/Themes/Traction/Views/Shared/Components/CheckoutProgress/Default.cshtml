@model CheckoutProgressModel
<div class="order-progress">
    <ul>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutProgressBefore })
        @* The extended check is needed, because a completed step needs to have "active-step" class for the new design.*@
        @{
            
            var cartClass = "active-step";
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Cart)
            {
                cartClass = "current-step";
            }
        }
        <li class="@cartClass">
			<a @(Model.CheckoutProgressStep != CheckoutProgressStep.Complete ? @Html.Raw($" href=\"{Url.RouteUrl("ShoppingCart")}\"") : null)>@T("Checkout.Progress.Cart")</a>
        </li>
        @{
            var addressClass = "inactive-step";
            if(Model.CheckoutProgressStep == CheckoutProgressStep.Address)
            {
                addressClass = "current-step";
            }
            if(Model.CheckoutProgressStep == CheckoutProgressStep.Shipping || Model.CheckoutProgressStep == CheckoutProgressStep.Payment || Model.CheckoutProgressStep == CheckoutProgressStep.Confirm || Model.CheckoutProgressStep == CheckoutProgressStep.Complete)
            {
                addressClass = "active-step";
            }
        }
        <li class="@addressClass">
			<a @(Model.CheckoutProgressStep != CheckoutProgressStep.Cart && Model.CheckoutProgressStep != CheckoutProgressStep.Complete ? @Html.Raw($" href=\"{Url.RouteUrl("CheckoutBillingAddress")}\"") : null)>@T("Checkout.Progress.Address")</a>
        </li>
        @{
            var shippingClass = "inactive-step";
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Shipping)
            {
                shippingClass = "current-step";
            }
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Payment || Model.CheckoutProgressStep == CheckoutProgressStep.Confirm || Model.CheckoutProgressStep == CheckoutProgressStep.Complete)
            {
                shippingClass = "active-step";
            }
        }
        <li class="@shippingClass">
			<a @(Model.CheckoutProgressStep != CheckoutProgressStep.Cart && Model.CheckoutProgressStep != CheckoutProgressStep.Address && Model.CheckoutProgressStep != CheckoutProgressStep.Complete ? @Html.Raw($" href=\"{Url.RouteUrl("CheckoutShippingMethod")}\"") : null)>@T("Checkout.Progress.Shipping")</a>
        </li>
        @{
            var paymentClass = "inactive-step";
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Payment)
            {
                paymentClass = "current-step";
            }
            if ( Model.CheckoutProgressStep == CheckoutProgressStep.Confirm || Model.CheckoutProgressStep == CheckoutProgressStep.Complete)
            {
                paymentClass = "active-step";
            }
        }
        <li class="@paymentClass">
			<a @(Model.CheckoutProgressStep != CheckoutProgressStep.Cart && Model.CheckoutProgressStep != CheckoutProgressStep.Address && Model.CheckoutProgressStep != CheckoutProgressStep.Shipping && Model.CheckoutProgressStep != CheckoutProgressStep.Complete ? @Html.Raw($" href=\"{Url.RouteUrl("CheckoutPaymentMethod")}\"") : null)>@T("Checkout.Progress.Payment")</a>
        </li>
        @{
            var confirmClass = "inactive-step";
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Confirm)
            {
                confirmClass = "current-step";
            }
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Complete)
            {
                confirmClass = "active-step";
            }
        }
        <li class="@confirmClass">
			<a @(Model.CheckoutProgressStep != CheckoutProgressStep.Cart && Model.CheckoutProgressStep != CheckoutProgressStep.Address && Model.CheckoutProgressStep != CheckoutProgressStep.Shipping && Model.CheckoutProgressStep != CheckoutProgressStep.Payment && Model.CheckoutProgressStep != CheckoutProgressStep.Complete ? @Html.Raw($" href=\"{Url.RouteUrl("CheckoutConfirm")}\"") : null)>@T("Checkout.Progress.Confirm")</a>
        </li>
        @{
            var completeClass = "inactive-step";
            if (Model.CheckoutProgressStep == CheckoutProgressStep.Complete)
            {
                completeClass = "current-step";
            }
        }
        <li class="@completeClass">
			<a>@T("Checkout.Progress.Complete")</a>
        </li>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutProgressAfter })
    </ul>
</div>
