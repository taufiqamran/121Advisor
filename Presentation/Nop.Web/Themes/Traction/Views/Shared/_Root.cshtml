@{
    Layout = "_Root.Head";
}
@{
    var homePage = String.Empty;
    var additionalClass = String.Empty;
    var homePageMainSliderHtml = String.Empty;

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();

    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase);
    if (isHomePage)
    {
        homePage = "home";
        var homePageMainSliderResult = await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });
        homePageMainSliderHtml = await homePageMainSliderResult.RenderHtmlContentAsync();

        if (!String.IsNullOrEmpty(homePageMainSliderHtml))
        {
            additionalClass = "home-slider";
        }
    }
}



@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page @homePage @additionalClass">
    @await Component.InvokeAsync("AdminHeaderLinks")
    @await Html.PartialAsync("_Header")
    <div class="overlayOffCanvas"></div>
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div class="responsive-nav-inner">
                @*SS AW: swap*@
                <div class="menu-title">
                    <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
                </div>
                <div class="personal-button" id="header-links-opener">
                    <span>@T("SevenSpikes.Themes.Common.Personal")</span>
                </div>

                <div class="search-wrap">
                    <span>@T("Search")</span>
                </div>
                <div class="filters-button">
                    <span>@T("SevenSpikes.Themes.Common.Filters")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="subheader-wrapper">
        <div class="logo-wrapper">
            <div class="header-logo">
                @*@await Component.InvokeAsync("Logo")*@
                <img title="" src="/Themes/Traction/Content/img/myTVO.svg">
            </div>
        </div>

        <div class="justAFixingDivBefore"></div>
        <div class="headerMenuParent">
            <div class="header-menu">
                <div class="close-menu">
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>
                @{
                    var menu = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
                }
                @if (String.IsNullOrEmpty(await menu.RenderHtmlContentAsync()))
                {
                    @await Component.InvokeAsync("TopMenu")
                }
                else
                {
                    @menu
                }
            </div>
        </div>
    </div>

    @Html.Raw(homePageMainSliderHtml)

    <div class="master-wrapper-content">
        <script asp-location="Footer">
			var localized_data = {
	            AjaxCartFailure: "@T("AjaxCart.Failure")"
	        };
            AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);
        </script>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
        @*ajax loading window*@
        <div class="ajax-loading-block-window" style="display: none">
            <div class="loading-image">
            </div>
        </div>
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
</div>

@await Component.InvokeAsync("Footer")
@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
